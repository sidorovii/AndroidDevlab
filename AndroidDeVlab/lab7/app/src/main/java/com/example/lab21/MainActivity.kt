package com.example.lab21import android.annotation.SuppressLintimport android.content.Intentimport android.database.DatabaseUtilsimport android.os.Bundleimport android.util.Logimport android.widget.SimpleAdapterimport android.widget.Toastimport androidx.appcompat.app.AppCompatActivityimport androidx.core.view.isEmptyimport androidx.core.view.isVisibleimport androidx.lifecycle.lifecycleScopeimport kotlinx.android.synthetic.main.activity_main.*import kotlinx.coroutines.launchimport kotlinx.coroutines.runBlockingimport java.io.Serializable@Suppress("NAME_SHADOWING")class MainActivity : AppCompatActivity(){    private var DATA_BASE_HANDLER: DataBaseHandler = DataBaseHandler(this)    private var UserHandlerObj: UserHandler = UserHandler()    var dataList =ArrayList<HashMap<String,String>>()    var userList = ArrayList<User>()    private val EMAIL_KEY = "e"    private val PASSWORD_KEY = "p"    private val USER_LIST_KEY = "u"    private val BUNDLE_KEY = "b"    private val NOT_EMPTY_USER_LIST = "empty"    private var isRestored = false    @SuppressLint("SuspiciousIndentation")    override fun onCreate(savedInstanceState: Bundle?)    {        Log.i("AppLogger","onCreate")        super.onCreate(savedInstanceState)        this.setContentView(R.layout.activity_main)        val db = DATA_BASE_HANDLER.writableDatabase        val simpleAdapter = SimpleAdapter(this, dataList,android.R.layout.simple_list_item_2,            arrayOf(EMAIL_KEY, PASSWORD_KEY), intArrayOf(android.R.id.text1,android.R.id.text2))        listView.adapter = simpleAdapter        restoreButton.setOnClickListener {            lifecycleScope.launch {                restoreButton.isEnabled = false                progressBar.isVisible = true                dataList.clear()                UserHandlerObj.restoreData(db, userList)                userList.forEach {                    dataList.add(it.userMap())                }                simpleAdapter.notifyDataSetChanged()                progressBar.isVisible = false                isRestored = true            }        }        /*if(isRestored != true)        {            dataList.clear()            UserHandlerObj.restoreData(db, userList)            userList.forEach {                dataList.add(it.userMap())            }        }*/        //dataList.clear()        /*userList.forEach {            dataList.add(it.userMap())        }*/        //simpleAdapter.notifyDataSetChanged()        var idListViewItemClicked: Int = -1        addButton.setOnClickListener()        {            val intent = Intent(this, LoginActivity2::class.java)            if(userList.isNotEmpty())            {            val args: Bundle = Bundle()                args.putSerializable(USER_LIST_KEY, userList as Serializable?)            intent.putExtra(BUNDLE_KEY, args)            intent.putExtra(NOT_EMPTY_USER_LIST, "true")            }            else            {                intent.putExtra(NOT_EMPTY_USER_LIST, "false")            }            startActivity(intent)        }        listView.setOnItemClickListener{parent,view,position,id ->            idListViewItemClicked = position            Toast.makeText(this,"id = $idListViewItemClicked",Toast.LENGTH_SHORT).show()        }        button_db_clear.setOnClickListener()        {            val dbDel = db.delete(DBContract.UserEntry.TABLE_NAME,"1",null)            Toast.makeText(this,"Rows deleted $dbDel",Toast.LENGTH_SHORT).show()            userList.clear()            dataList.clear()            simpleAdapter.notifyDataSetChanged()        }        delButton.setOnClickListener()        {            if (listView.isEmpty() || idListViewItemClicked == -1)            {                Toast.makeText(this, "Please, select row", Toast.LENGTH_SHORT).show()            }            else            {                runBlocking {                    progressBar.isVisible = true                    UserHandlerObj.delUser(db,userList.get(idListViewItemClicked)._userEmail)                    progressBar.isVisible = false                }                Toast.makeText(this, "Deleted from table id = $idListViewItemClicked",                    Toast.LENGTH_SHORT).show()                userList.removeAt(idListViewItemClicked)                dataList.clear()                userList.forEach {                    dataList.add(it.userMap())                }                simpleAdapter.notifyDataSetChanged()                idListViewItemClicked = -1            }        }    }    override fun onStart()    {        Log.i("AppLogger", "onStart")        super.onStart()    }    override fun onResume()    {        Log.i("AppLogger","onResume")        super.onResume()        val strEmailIntentExtra: String? = intent.getStringExtra(EMAIL_KEY)        val strPasswordIntentExtra: String? = intent.getStringExtra(PASSWORD_KEY)        val db = DATA_BASE_HANDLER.writableDatabase        if (strPasswordIntentExtra != null && strEmailIntentExtra != null)        {            val user = User(strEmailIntentExtra,strPasswordIntentExtra)            //userList.add(user)            runBlocking {                progressBar.isVisible = true                UserHandlerObj.insertUser(db, user)                progressBar.isVisible = false            }            val dbRowsCount = DatabaseUtils.queryNumEntries(db,DBContract.UserEntry.TABLE_NAME)            //dataList.add(user.userMap())            Toast.makeText(this,"Count of rows: $dbRowsCount",Toast.LENGTH_SHORT).show()        }    }    override fun onPause()    {        Log.i("AppLogger", "onPause")        super.onPause()    }    override fun onStop()    {        Log.i("AppLogger", "onStop")        DATA_BASE_HANDLER.close()        super.onStop()    }    override fun onDestroy()    {        Log.i("AppLogger", "onDestroy")        super.onDestroy()    }}